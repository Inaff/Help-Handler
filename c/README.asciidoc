:toc:
:blank: pass:[ +]

image:https://www.dropbox.com/s/qvtu9z2c4xekaww/f6d766cccecd96c622788a4aa99b438d1ab4abc9faee901949ea14beec23b5ee.png?raw=1[alt="HelpHandler"]




Requirements
------------
##### OS
- Windows (MSVC currently not supported)
- macOS
- Linux

##### Compiler
- GCC/Clang/MinGW
- C99 support



Usage
------
The only function needed after including help_handler.h is `help_handler(int argc, char** argv, const char* help_dialogue)`. Beyond that, most users will only be concerned with the `version` function and `help_handler_config(int option_flags)` function (see below) to enable and disable various functionality to avoid output when unwanted. As a bonus, functions support type overloading if your compiler standard is set to C11 or above (See below). You can refer to the _examples_ folder for more advanced usage.

Copy-paste example:
[source,C]
----------
#include "help_handler.h"

#include <stdlib.h>


int main(int argc, char** argv) {
    help_handler_version("1.0"); //This must come before the main help_handler function, which is what actually processes arguments
    help_handler(argc, argv, "usage: help dialogue example");

    return EXIT_SUCCESS;
}
----------
A negative value is returned if an error occurred, otherwise the number of arguments matched will be returned, (0 if none).


Functions
---------
[source,C]
----------
bool help_handler_is_err(int errorCode);
char* help_handler_get_err(void);
int help_handler(int argc, char** argv, const char* help_dialogue);
void help_handler_config(int option_flags); 
void help_handler_disable_err(bool disableErrorOutput);
int help_handler_f(int argc, char** argv, const char* file_name);
int help_handler_info(const char* app_name, const char* ver);
int help_handler_name(const char* app_name);
int help_handler_version(const char* ver);
void help_handler_pipe(const char* output_pipe);
void help_handler_print_err(void);

C99 only
int help_handler_name_s(const char* app_name);
int help_handler_name_w(const wchar_t* app_name);
int help_handler_version_s(const char* ver);
int help_handler_w(int argc, char** argv, const wchar_t* help_dialogue);
int help_handler_info_d(const char* app_name, double ver);
int help_handler_info_i(const char* app_name, int ver);
int help_handler_info_s(const char* app_name, const char* ver);
void help_handler_pipe_i(int output_pipe);
void help_handler_pipe_s(const char* output_pipe);
void help_handler_version_d(double ver);
void help_handler_version_i(unsigned int ver);
----------

Configuration options
---------------------
The `config` function is used to configure output functionality. The passable parameters are as follows...
```
DISABLE_NO_ARGS_HELP     - Disable printing of help dialogue when no arguments are given
DISABLE_EXTRA_STRINGS    - Disable matching of h, -h, --h, v, -v and --v which may conflict with your program’s flags
DISABLE_MATCH_HYPHENS    - Disable matching of arguments with hyphens (i.e., Help Handler will match "help", but not "--help")
ENABLE_HYPHENS_ONLY      - Only match arguments that begin with one or more hyphens
ENABLE_UNKNOWN_ARGS_HELP - Print help dialogue when an unknown argument is passed. You would typically whitelist your program’s option flags in combination with this
```

You may define these macros prior to including help_handler.h:
```
HELP_HANDLER_NO_OVERLOADING - Disable function overloading in the library
HELP_HANDLER_IGNORE_WARN    - Disable output of warnings
HELP_HANDLER_IGNORE_ERR     - Disable output of errors
HELP_HANDLER_IGNORE_ALL     - Disable output of warnings and errors
```

Known limitations & issues
--------------------------
- Non-POSIX systems don't have regex argument matching, as the regex library (_regex.h_) is a POSIX C library, and Windows does not even have a system library for this. A third party library will be embedded for those systems in the future.
- There is no support for UTF-8, and therefore essentially only English.


Contributing
------------
If you'd like to submit a bugfix, I'd be glad to take a pull request or fix it myself given adequate description of the cause of the issue. If you'd like a feature added, it will be considered so long as it's within the scope of this project.


License
-------
Distributed under the MIT License. See link:https://github.com/TechnicFully/Help-Handler/blob/master/LICENSE[here] for more information.


Contact
------
keaton@keatonsquires.com


